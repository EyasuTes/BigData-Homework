--- Part 1a ---
private static final Pattern WORD_PATTERN = Pattern.compile("^[a-zA-Z]{6,24}$");
private static final Pattern NUMBER_PATTERN = Pattern.compile("^-?[0-9]+(\\.[0-9]+)?$");

--- Part 1b ---

For tasks (1) and (3):

    javac -classpath `hadoop classpath` -d classes HadoopWordFrequency.java

    jar -cvf hadoopanalysis.jar -C classes/ .

    hadoop jar hadoopanalysis.jar HadoopWordFrequency <input_folder> <output_folder>

(1) Words with count == 1000 -> Lines with prefix EXACT1000:
(3) Top-100 frequent words -> Lines with prefix TOP100:

For tasks (2) and (4):

    javac -classpath `hadoop classpath` -d classes HadoopWordPairs.java    

    jar -cvf hadoopanalysis.jar -C classes/ .

    hadoop jar WordPairAnalysis.jar HadoopWordPairAnalysis <input_folder> <output_folder>


(2) Word pairs with count == 1000 (using distance m <= 2) -> Lines in format EXACT1000_PAIR:word1:word2
(4) Top-100 number-word pairs (using distance m <= 2) -> Lines in format TOP100_NUMWORD:number:word     count


--- Part 1c ---


Hardware Setup
--------------

CPU:
- Architecture: x86_64 (64-bit)
- Model: Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz
- Total Cores: 24 (2 sockets Ã— 12 cores)
- Threads per Core: 1
- NUMA Nodes: 2
- CPU Base Frequency: 2.20 GHz
- CPU Max Frequency: 2.90 GHz

Memory:
- Total RAM: 125 GB
- Used: 55 GB
- Free: 53 GB
- Cache/Buffers: 15 GB
- Available: 68 GB
- Swap: 4 GB (fully used)


Scalability Results Table
==========================

| Step | Subdirectories Included             | Real Time (s) | User Time (s) | Sys Time (s) |
|------|-------------------------------------|----------------|----------------|---------------|
| 1    | AA                                  | 0m40.008s      | 1m25.868s      | 0m4.357s      |
| 2    | AA, AB                              | 1m19.969s      | 2m45.854s      | 0m6.146s      |
| 3    | AA, AB, AC                          | 1m56.279s      | 4m23.419s      | 0m8.874s      |
| 4    | AA, AB, AC, AD                      | 2m39.442s      | 6m13.680s      | 0m11.698s     |
| 5    | AA, AB, AC, AD, AE                  | 2m23.962s      | 7m59.348s      | 0m10.943s     |
| 6    | AA, AB, AC, AD, AE, AF              | 2m50.376s      | 8m21.319s      | 0m10.024s     |
| 7    | AA, AB, AC, AD, AE, AF, AG          | 4m42.631s      | 12m47.956s     | 0m15.744s     |
| 8    | AA, AB, AC, AD, AE, AF, AG, AH      | 5m1.721s       | 12m53.605s     | 0m16.938s     |
| 9    | AA, AB, AC, AD, AE, AF, AG, AH, AI  | 5m51.133s      | 16m26.403s     | 0m18.742s     |
| 10   | AA, AB, AC, ..., AJ                 | 6m30.172s      | 16m57.929s     | 0m22.727s     |
| 11   | AA, AB, AC, ..., AK                 | 7m3.110s       | 18m39.885s     | 0m23.336s     |



the runtime shows a generally linear increase in runtime as we increase the number of
directories. we used the HPC cluster to conduct this test and have showen a graph bellow 
to illustrate the trend. would be interesting to see how it performs in hdfs but we were not 
able to test in hdfs.


 Scalability of Hadoop Word Pair Analysis
========================================
(Y-axis: Real Execution Time in seconds)

 450 |                                                          *
 420 |                                                        *
 390 |                                                   *
 360 |                                              *
 330 |
 300 |                                        *
 270 |
 240 |
 210 |
 180 |                                 *
 150 |                           *
 120 |                     *
  90 |               *
  60 |         *
  30 |
   0 |*
     +-----------------------------------------------------------------
      1        2    3      4     5    6       7      8   9   10 11
         (Step = Number of Subdirectories)


bellow is an example of how we ran the map reduce test on multiple directories. which required us to make some modifications to the code.

$ time hadoop jar launch-hadoop/HadoopWordCount.jar HadoopWordPairAnalysis   Data/Wikipedia-En-41784-Articles/AA   Data/Wikipedia-En-41784-Articles/AB   Data/Wikipedia-En-41784-Articles/AC   Data/Wikipedia-En-41784-Articles/AD   Data/Wikipedia-En-41784-Articles/AE   Data/Wikipedia-En-41784-Articles/AF   Data/Wikipedia-En-41784-Articles/AG   Data/Wikipedia-En-41784-Articles/AH   Data/Wikipedia-En-41784-Articles/AI   output1c/output_up_to_AI